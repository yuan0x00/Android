name: Build and Release on Tag

on:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*' # ÂåπÈÖçÂ¶Ç v1.0.0 ÁöÑÁâàÊú¨Ê†áÁ≠æ

permissions:
  contents: write      # ÊòéÁ°ÆÊéàÊùÉÂàõÂª∫ Release Âíå‰∏ä‰º†‰∫ßÁâ©

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤Ôºå‰æø‰∫éÁîüÊàê changelog

      - name: Verify Signing Assets
        run: |
          if [ ! -f app/release.jks ]; then
            echo "Á≠æÂêçÊñá‰ª∂ app/release.jks Áº∫Â§±" >&2
            exit 1
          fi
          if [ ! -f keystore.properties ]; then
            echo "Á≠æÂêçÈÖçÁΩÆ keystore.properties Áº∫Â§±" >&2
            exit 1
          fi
          echo "Ê£ÄÊµãÂà∞Á≠æÂêçÊñá‰ª∂ $(stat -c%s app/release.jks) Â≠óËäÇ"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Find APK File
        id: find-apk
        run: |
          APK_PATH=$(find app/build/outputs/apk -name "*.apk" -type f | grep release | head -1)
          if [ -z "$APK_PATH" ]; then
            echo "APK file not found!"
            find app/build/outputs/apk -type f || echo "No APK files found"
            exit 1
          fi
          echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT
          echo "Found APK: $APK_PATH"

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.find-apk.outputs.APK_PATH }}
          retention-days: 30

      - name: Generate Release Notes
        if: startsWith(github.ref, 'refs/tags/v')
        id: release-notes
        run: |
          TAG_NAME="${{ github.ref_name }}"
          PREV_TAG=$(git describe --tags --abbrev=0 "$TAG_NAME"^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "RELEASE_BODY=Initial release $TAG_NAME" >> $GITHUB_OUTPUT
            echo "## Initial Release $TAG_NAME" > release_notes.md
          else
            echo "RELEASE_BODY=Release $TAG_NAME" >> $GITHUB_OUTPUT
            echo "## Changes since $PREV_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" "$PREV_TAG".."$TAG_NAME" >> release_notes.md 2>/dev/null || echo "- No changelog available" >> release_notes.md
          fi

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          generate_release_notes: true
          draft: false
          prerelease: |
            ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
          files: |
            ${{ steps.find-apk.outputs.APK_PATH }}

      - name: Notify Success
        if: success()
        run: |
          echo "üéâ Build and Release completed successfully!"
          echo "Tag: ${{ github.ref_name }}"
          echo "APK: ${{ steps.find-apk.outputs.APK_PATH }}"

      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå Build or Release failed!"
          echo "Please check the workflow logs for details."
