name: Release

on:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*' # ÂåπÈÖçÂ¶Ç v1.0.0 ÁöÑÁâàÊú¨Ê†áÁ≠æ
  workflow_dispatch: # Ê∑ªÂä†ÊâãÂä®Ëß¶Âèë
    inputs:
      tag_name:
        description: 'Ë¶ÅÂèëÂ∏ÉÁöÑÁâàÊú¨Ê†áÁ≠æ (‰æãÂ¶Ç: v1.0.0)'
        required: true
        default: 'v1.0.0'
      is_prerelease:
        description: 'ÊòØÂê¶‰∏∫È¢ÑÂèëÂ∏ÉÁâàÊú¨'
        type: boolean
        default: false
      skip_apk_build:
        description: 'Ë∑≥ËøáAPKÊûÑÂª∫Ôºà‰ªÖÂàõÂª∫ReleaseÔºâ'
        type: boolean
        default: false

permissions:
  contents: write      # ÊòéÁ°ÆÊéàÊùÉÂàõÂª∫ Release Âíå‰∏ä‰º†‰∫ßÁâ©

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤Ôºå‰æø‰∫éÁîüÊàê changelog
          ref: ${{ github.event.inputs.tag_name || github.ref }}

      - name: Validate Inputs (Manual Trigger)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "‚ùå ÈîôËØØÁöÑÊ†áÁ≠æÊ†ºÂºè: $TAG_NAME"
            echo "üìã ËØ∑‰ΩøÁî®Ê†ºÂºè: v1.0.0, v2.1.5 Á≠â"
            exit 1
          fi
          echo "‚úÖ Ê†áÁ≠æÊ†ºÂºèÊ≠£Á°Æ: $TAG_NAME"

      - name: Verify Signing Assets
        if: ${{ !github.event.inputs.skip_apk_build || github.event_name != 'workflow_dispatch' }}
        run: |
          if [ ! -f app/release.jks ]; then
            echo "Á≠æÂêçÊñá‰ª∂ app/release.jks Áº∫Â§±" >&2
            exit 1
          fi
          if [ ! -f keystore.properties ]; then
            echo "Á≠æÂêçÈÖçÁΩÆ keystore.properties Áº∫Â§±" >&2
            exit 1
          fi
          echo "Ê£ÄÊµãÂà∞Á≠æÂêçÊñá‰ª∂ $(stat -c%s app/release.jks) Â≠óËäÇ"

      - name: Set up JDK 17
        if: ${{ !github.event.inputs.skip_apk_build || github.event_name != 'workflow_dispatch' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Validate Gradle Wrapper
        if: ${{ !github.event.inputs.skip_apk_build || github.event_name != 'workflow_dispatch' }}
        uses: gradle/wrapper-validation-action@v2

      - name: Grant execute permission to gradlew
        if: ${{ !github.event.inputs.skip_apk_build || github.event_name != 'workflow_dispatch' }}
        run: chmod +x ./gradlew

      - name: Setup Gradle
        if: ${{ !github.event.inputs.skip_apk_build || github.event_name != 'workflow_dispatch' }}
        uses: gradle/actions/setup-gradle@v3

      - name: Build Release APK
        if: ${{ !github.event.inputs.skip_apk_build || github.event_name != 'workflow_dispatch' }}
        run: ./gradlew assembleRelease

      - name: Find APK File
        if: ${{ !github.event.inputs.skip_apk_build || github.event_name != 'workflow_dispatch' }}
        id: find-apk
        run: |
          APK_PATH=$(find app/build/outputs/apk -name "*.apk" -type f | grep release | head -1)
          if [ -z "$APK_PATH" ]; then
            echo "APK file not found!"
            find app/build/outputs/apk -type f || echo "No APK files found"
            exit 1
          fi
          echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT
          echo "Found APK: $APK_PATH"

      - name: Upload APK Artifact
        if: ${{ !github.event.inputs.skip_apk_build || github.event_name != 'workflow_dispatch' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.find-apk.outputs.APK_PATH }}
          retention-days: 30

      - name: Generate Release Notes
        id: release-notes
        run: |
          # Á°ÆÂÆöÊ†áÁ≠æÂêçÁß∞
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.tag_name }}"
          else
            TAG_NAME="${{ github.ref_name }}"
          fi
          
          echo "Generating release notes for tag: $TAG_NAME"
          
          # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™Ê†áÁ≠æ
          PREV_TAG=$(git describe --tags --abbrev=0 "$TAG_NAME"^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "RELEASE_BODY=Initial release $TAG_NAME" >> $GITHUB_OUTPUT
            echo "## Initial Release $TAG_NAME" > release_notes.md
            echo "ËøôÊòØ $TAG_NAME ÁöÑÂàùÂßãÁâàÊú¨ÂèëÂ∏É„ÄÇ" >> release_notes.md
          else
            echo "RELEASE_BODY=Release $TAG_NAME" >> $GITHUB_OUTPUT
            echo "## Changes since $PREV_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" "$PREV_TAG".."$TAG_NAME" >> release_notes.md 2>/dev/null || echo "- No changelog available" >> release_notes.md
          fi
          
          # Ê∑ªÂä†ÊâãÂä®Ëß¶ÂèëÁöÑËØ¥Êòé
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "" >> release_notes.md
            echo "*ÊâãÂä®Ëß¶ÂèëÂèëÂ∏É*" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
          body_path: release_notes.md
          generate_release_notes: true
          draft: false
          prerelease: |
            ${{ contains(github.event.inputs.tag_name, 'beta') || contains(github.event.inputs.tag_name, 'alpha') || contains(github.event.inputs.tag_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') || github.event.inputs.is_prerelease }}
          files: |
            ${{ steps.find-apk.outputs.APK_PATH }}

      - name: Notify Success
        if: success()
        run: |
          echo "üéâ Build and Release completed successfully!"
          echo "Trigger: ${{ github.event_name }}"
          echo "Tag: ${{ github.event.inputs.tag_name || github.ref_name }}"
          echo "APK: ${{ steps.find-apk.outputs.APK_PATH }}"

      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå Build or Release failed!"
          echo "Trigger: ${{ github.event_name }}"
          echo "Please check the workflow logs for details."